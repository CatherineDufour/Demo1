kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: dec-demo-exp-att-del
  annotations:
    description: Site Web qui émet l'attestation pour les expérimentations d'une attestation délégué.
    tags: cqen, experimentation, sqin, aries, dec, directeur de l'état civil, émetteur, attestation, délégué
objects:
#DEC-kms (PostgreSQL)
- kind: Secret
  apiVersion: v1
  metadata:
    name: dec-build
  stringData:
    WebHookSecretKey: "${GITHUB_WEBHOOK_SECRET}"
- kind: Secret
  apiVersion: v1
  metadata:
    name: dec-kms
    annotations:
      template.openshift.io/expose-username: "{.data['database-user']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-username: "{.data['database-admin-user']}"
      template.openshift.io/expose-password: "{.data['database-admin-password']}"
      template.openshift.io/expose-password: "{.data['database-name']}"
  stringData:
    database-user: "dbuser"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-admin-user: "postgres"
    database-admin-password: "${POSTGRESQL_ADMIN_PASSWORD}"
    database-name: "${POSTGRESQL_DATABASE_NAME}"
- kind: Service
  apiVersion: v1
  metadata:
    name: dec-kms
  spec:
    ports:
    - name: dec-kms
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
    selector:
      name: dec-kms
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: dec-kms
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: dec-kms
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    labels:
      app: dec-kms
      app.kubernetes.io/part-of: DEC
  spec:
    strategy:
      type: Recreate
    triggers:
    - github:
        secretReference:
          name: dec-build
      type: GitHub
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - dec-kms
        from:
          kind: ImageStreamTag
          name: postgresql:10
          namespace: openshift
        lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector:
      name: dec-kms
    template:
      metadata:
        labels:
          name: dec-kms
      spec:
        containers:
        - name: dec-kms
          image: " "
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/usr/libexec/check-container"
          livenessProbe:
            timeoutSeconds: 10
            initialDelaySeconds: 120
            exec:
              command:
              - "/usr/libexec/check-container"
              - "--live"
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: dec-kms
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: dec-kms
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: dec-kms
                key: database-name
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: dec-kms
                key: database-admin-password                
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
          - name: dec-kms-data
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: dec-kms-data
          persistentVolumeClaim:
            claimName: dec-kms
        restartPolicy: Always
        dnsPolicy: ClusterFirst
  status: {}

#DEC-agent
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: dec-agent
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: dec-agent
    name: dec-agent
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: 'dec-agent:latest'
    resources: {}
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
    postCommit: {}
    source:
      contextDir: DEC-agent
      type: Git
      git:
        ref: 'deploy-parameters'
        uri: 'https://github.com/CQEN-QDCE/Demo1.git'
    triggers:
      - github:
          secretReference:
            name: dec-build
        type: GitHub
      - type: ConfigChange
    runPolicy: Serial
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: dec-agent
    labels:
      app: dec-agent
      app.kubernetes.io/part-of: DEC
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
      activeDeadlineSeconds: 21600
    template:
      metadata:
        name: dec-agent
        labels:
          app: dec-agent
          app.kubernetes.io/part-of: DEC
      spec:
        containers:
          - name: dec-agent
            command:
              - bash
              - -c
              - $(echo aca-py -v);
            env:
              - name: GENESIS_URL
                value: ${GENESIS_FILE_URL}
              - name: AGENT_WALLET_NAME
                value: dec-agent-wallet
              - name: WALLET_TYPE
                value: ${WALLET_STORAGE_TYPE}
              - name: POSTGRESQL_WALLET_HOST
                value: ${WALLET_HOST}
              - name: POSTGRESQL_WALLET_PORT
                value: ${WALLET_HOST_PORT}
              - name: WALLET_STORAGE_CONFIGURATION
                value: ${WALLET_STORAGE_CONFIG}
              - name: WALLET_STORAGE_CREDENTIALS
                value: ${WALLET_STORAGE_CREDS}
              - name: POSTGRESQL_KMS_USER
                valueFrom:
                  secretKeyRef:
                    name: dec-kms
                    key: database-user
              - name: POSTGRESQL_KMS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: dec-kms
                    key: database-password
              - name: POSTGRESQL_KMS_ADMIN_USER
                valueFrom:
                  secretKeyRef:
                    name: dec-kms
                    key: database-admin-user
              - name: POSTGRESQL_KMS_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: dec-kms
                    key: database-admin-password
              - name: WALLET_ENCRYPTION_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
                    key: key
              - name: INDY_WALLET_SEED
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
                    key: seed
              - name: WALLET_DID
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
                    key: did
              - name: HTTP_INTERFACE_PORT
                value: ${AGENT_HTTP_PORT}
              - name: ADMIN_INTERFACE_PORT
                value: ${AGENT_ADMIN_PORT}
              - name: AGENT_ADMIN_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${NAME}
                    key: admin-api-key
              - name: AGENT_NAME
                value: ${AGENT_LABEL_NAME}
              - name: AGENT_ENDPOINT
                value: 'Replace with agent route location'
              - name: AGENT_LOG_LEVEL
                value: ${LOG_LEVEL}
              - name: TIMING
                value: ${AGENT_TIMING}
              - name: READ_ONLY_LEDGER
                value: ${AGENT_READ_ONLY_LEDGER}
            image:
            ports:
              - containerPort: ${{AGENT_ADMIN_PORT}}
                protocol: TCP
              - containerPort: ${{AGENT_HTTP_PORT}}
                protocol: TCP
            readinessProbe:
              timeoutSeconds: 30
              initialDelaySeconds: 3
              exec:
                command:
                  - bash
                  - "-c"
                  - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/ready" -H "X-API-KEY: ${AGENT_ADMIN_API_KEY}"'
            livenessProbe:
              timeoutSeconds: 30
              initialDelaySeconds: 300
              exec:
                command:
                  - bash
                  - "-c"
                  - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/live" -H "X-API-KEY: ${AGENT_ADMIN_API_KEY}"'
            imagePullPolicy: IfNotPresent
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - github:
          secretReference:
            name: dec-build
        type: GitHub
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - dec-agent
          from:
            kind: ImageStreamTag
            name: 'dec-agent:latest'
    replicas: 1
    revisionHistoryLimit: 10
    test: false
    selector:
      app: dec-agent
    template:
      metadata:
        labels:
          app: dec-agent
      spec:
        containers:
          - name: dec-agent
            image: " "
            ports:
              - containerPort: 3000
                protocol: TCP
              - containerPort: 8000
                protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    name: dec-agent
  spec:
    selector:
      app: dec-agent
    ports:
      - name: '3000'
        protocol: TCP
        port: 3000
        targetPort: 3000
      - name: '8000'
        protocol: TCP
        port: 8000
        targetPort: 8000
- kind: Route
  apiVersion: v1
  metadata:
    name: dec-agent
  spec:
    host: dec-agent.apps.exp.lab.pocquebec.org
    to:
      kind: Service
      name: dec-agent
      weight: 100
    port:
      targetPort: 8000
    wildcardPolicy: None
  status:
    ingress:
      - host: dec-agent.apps.exp.lab.pocquebec.org
        routerName: default
        conditions:
          - type: Admitted
            status: 'True'
        wildcardPolicy: None
        routerCanonicalHostname: apps.exp.lab.pocquebec.org
- kind: Route
  apiVersion: v1
  metadata:
    name: dec-agent-admin
  spec:
    host: dec-agent-admin.apps.exp.lab.pocquebec.org
    to:
      kind: Service
      name: dec-agent
      weight: 100
    port:
      targetPort: 3000
    wildcardPolicy: None
  status:
    ingress:
      - host: dec-agent-admin.apps.exp.lab.pocquebec.org
        routerName: default
        conditions:
          - type: Admitted
            status: 'True'
        wildcardPolicy: None
        routerCanonicalHostname: apps.exp.lab.pocquebec.org

#DEC-controller
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: dec-controller
- kind: BuildConfig
  apiVersion: v1
  metadata:
    annotations:
      app.openshift.io/vcs-uri: https://github.com/CQEN-QDCE/Demo1.git
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: dec-controller
    name: dec-controller
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: dec-controller:latest
    source:
      contextDir: DEC-controller
      git:
        ref: 'deploy-parameters'
        uri: https://github.com/CQEN-QDCE/Demo1.git
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
      type: Docker
    triggers:
      - github:
          secretReference:
            name: dec-build
        type: GitHub
      - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: dec-controller
    labels:
      app: dec-controller
      app.kubernetes.io/part-of: DEC
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
      activeDeadlineSeconds: 21600
    triggers:
      - github:
          secretReference:
            name: dec-build
        type: GitHub
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - dec-controller
          from:
            kind: ImageStreamTag
            name: "dec-controller:latest"
    replicas: 1
    revisionHistoryLimit: 10
    test: false
    selector:
      app: dec-controller
    template:
      metadata:
        labels:
          app: dec-controller
      spec:
        containers:
          - name: dec-controller
            image: " "
            ports:
              - containerPort: 10000
                protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    name: dec-controller
  spec:
    selector:
      app: dec-controller
    ports:
      - name: "10000"
        protocol: TCP
        port: 10000
        targetPort: 10000
- kind: Route
  apiVersion: v1
  metadata:
    name: dec-controller
  spec:
    host: dec-controller.apps.exp.lab.pocquebec.org
    to:
      kind: Service
      name: dec-controller
      weight: 100
    port:
      targetPort: 10000
    wildcardPolicy: None
  status:
    ingress:
      - host: dec-controller.apps.exp.lab.pocquebec.org
        routerName: default
        conditions:
          - type: Admitted
            status: "True"
        wildcardPolicy: None
        routerCanonicalHostname: apps.exp.lab.pocquebec.org
parameters:
- name: GITHUB_WEBHOOK_SECRET
  description: A secret string used to configure the GitHub webhook for the marketplace app build
  generate: expression 
  from: "[a-zA-Z0-9]{40}"
  required: true
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL connection password
  description: Password for the PostgreSQL connection user. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: POSTGRESQL_ADMIN_PASSWORD
  displayName: PostgreSQL administrator password
  description: Password for the PostgreSQL administrative account. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: POSTGRESQL_DATABASE_NAME
  displayName: PostgreSQL database name
  description: Name of the PostgreSQL database.
  required: true
  value: "kms"
- name: GENESIS_FILE_URL
  displayName: Genesis File URL
  description: The URL from which the genesis file can be downloaded.
  required: true
  value: http://vonx.pocquebec.org:9000/genesis
- name: LOG_LEVEL
  displayName: Log Level
  description: The logging level for the agent.
  required: true
  value: DEBUG
- name: WALLET_HOST
  displayName: PostgreSql Wallet Hostname
  required: true
  description: Hostname of the deployed database hosting the wallet.  Only used when WALLET_STORAGE_TYPE = postgres_storage.
  value: dec-kms
- name: WALLET_HOST_PORT
  displayName: PostgreSql Wallet Port
  required: true
  description: The port number of the deployed database hosting the wallet.  Only used when WALLET_STORAGE_TYPE = postgres_storage.
  value: "5432"
- name: WALLET_STORAGE_TYPE
  displayName: Wallet Storage Type
  description:
    The wallet storage type.  Your choice of 'postgres' or 'sqlite' at
    the moment.  If not defined, defaults to 'sqlite' for compatibility
  required: false
  value: postgres_storage
- name: AGENT_ADMIN_PORT
  displayName: Agent Admin Port
  description: The admin port on which the service will listen.
  required: true
  value: "8024"